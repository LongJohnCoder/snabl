* add if-else: macro
* add swap macro
* add type.eqval/equid
** default implementation throw
** implement for all typess
* add =/== funcs
** call eqval/equid by default
* add test=/== funcs
* add load func
* add run mode
* add [] indexing support
** parse as func '[]' and call with args
* finish fib support
* add repl(env, in, out) fn
* add use: macro
* move +/drop to abc lib
** eval snabl code
* add ops PushCall PopCall
* exec funcs/macros without args immediately
** otherwise at end of expr or ,
* add optional func.parent_scope
** use as parent for begin
* precompile fimps
** compile rest on demand
* add jump op
** ssize_t nops
** update pc
* add set/get_var ops
* add env.push/pop_scope
** update stack_begin in push
* add recall op
** jump immediately
** remember scope iter and truncate before jump
* add generics
** add Type._args
*** deque of ATypePtrs
** add Type.specialize(type, ...)
*** check types
** add virtual protected Type.specialize()
*** override to create new instance
** add Sink<T>
*** add push fn
* add code generation
** generate function
*** take env param
** snabl compile/build
** generate harness with env
** add OpType.emit_cpp fn
*** generate code to emit op on env bin
* add fimp lookup
** add lib.fimps/add_fimp
*** call from func when fimp is added
*** use instead of add_func
** adapt id-parse to handle <..>
** call get_fimp instead of get_func if id contains '<'
* add sqlite plugin
* add wxwidgets plugin
* add proxygen plugin
