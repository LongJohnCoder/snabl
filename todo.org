* add type list support
** <Int Str>
** trigger parse from parse_id
** add TypeList form
*** consume in Id compile
*** throw error if unused
* add type.eqval/equid
** default implementation throw
** implement for all typess
* add =/== funcs
** call eqval/equid by default
* add test=/== funcs
** use in tests
* add if-else: macro
* add func: macro
** add optional parent_scope
*** use as parent for begin
* finish fib
* add repl(env, in, out) fn
* add swap macro
* add load func
** call when called with args
* add [] indexing support
** parse as func '[]' and call with args

* add use: macro
* move +/drop to abc lib
** eval snabl code
* add ops PushCall PopCall
* precompile fimps
** compile rest on demand
* add jump op
** ssize_t nops
** update pc
* add set/get_var ops
* add env.push/pop_scope
** update stack_begin in push
* add recall op
** jump immediately
** remember scope iter and truncate before jump
* add generics
** add Type._args
*** deque of ATypePtrs
** add Type.specialize(type, ...)
*** check types
** add virtual protected Type.specialize()
*** override to create new instance
** add Sink<T>
*** add push fn
* add code generation
** generate function
*** take env param
* add fimp lookup
** add lib.fimps/add_fimp
*** call from func when fimp is added
*** use instead of add_func
* add sqlite plugin
* add proxygen plugin
* add wxwidgets plugin
